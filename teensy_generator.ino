#include <EEPROM.h>

uint16_t sineTable1[512] = {
  0x800,0x819,0x832,0x84b,0x864,0x87d,0x896,0x8af,
  0x8c8,0x8e1,0x8fa,0x913,0x92c,0x945,0x95e,0x976,
  0x98f,0x9a8,0x9c0,0x9d9,0x9f1,0xa09,0xa22,0xa3a,
  0xa52,0xa6a,0xa82,0xa9a,0xab1,0xac9,0xae0,0xaf8,
  0xb0f,0xb26,0xb3d,0xb54,0xb6b,0xb82,0xb98,0xbae,
  0xbc5,0xbdb,0xbf1,0xc06,0xc1c,0xc32,0xc47,0xc5c,
  0xc71,0xc86,0xc9a,0xcaf,0xcc3,0xcd7,0xceb,0xcff,
  0xd12,0xd26,0xd39,0xd4c,0xd5f,0xd71,0xd83,0xd95,
  0xda7,0xdb9,0xdca,0xddc,0xded,0xdfd,0xe0e,0xe1e,
  0xe2e,0xe3e,0xe4e,0xe5d,0xe6c,0xe7b,0xe8a,0xe98,
  0xea6,0xeb4,0xec1,0xecf,0xedc,0xee8,0xef5,0xf01,
  0xf0d,0xf19,0xf24,0xf30,0xf3a,0xf45,0xf4f,0xf59,
  0xf63,0xf6d,0xf76,0xf7f,0xf87,0xf90,0xf98,0xf9f,
  0xfa7,0xfae,0xfb5,0xfbb,0xfc2,0xfc8,0xfcd,0xfd3,
  0xfd8,0xfdc,0xfe1,0xfe5,0xfe9,0xfec,0xff0,0xff3,
  0xff5,0xff7,0xff9,0xffb,0xffd,0xffe,0xffe,0xfff,
  0xfff,0xfff,0xffe,0xffe,0xffd,0xffb,0xff9,0xff7,
  0xff5,0xff3,0xff0,0xfec,0xfe9,0xfe5,0xfe1,0xfdc,
  0xfd8,0xfd3,0xfcd,0xfc8,0xfc2,0xfbb,0xfb5,0xfae,
  0xfa7,0xf9f,0xf98,0xf90,0xf87,0xf7f,0xf76,0xf6d,
  0xf63,0xf59,0xf4f,0xf45,0xf3a,0xf30,0xf24,0xf19,
  0xf0d,0xf01,0xef5,0xee8,0xedc,0xecf,0xec1,0xeb4,
  0xea6,0xe98,0xe8a,0xe7b,0xe6c,0xe5d,0xe4e,0xe3e,
  0xe2e,0xe1e,0xe0e,0xdfd,0xded,0xddc,0xdca,0xdb9,
  0xda7,0xd95,0xd83,0xd71,0xd5f,0xd4c,0xd39,0xd26,
  0xd12,0xcff,0xceb,0xcd7,0xcc3,0xcaf,0xc9a,0xc86,
  0xc71,0xc5c,0xc47,0xc32,0xc1c,0xc06,0xbf1,0xbdb,
  0xbc5,0xbae,0xb98,0xb82,0xb6b,0xb54,0xb3d,0xb26,
  0xb0f,0xaf8,0xae0,0xac9,0xab1,0xa9a,0xa82,0xa6a,
  0xa52,0xa3a,0xa22,0xa09,0x9f1,0x9d9,0x9c0,0x9a8,
  0x98f,0x976,0x95e,0x945,0x92c,0x913,0x8fa,0x8e1,
  0x8c8,0x8af,0x896,0x87d,0x864,0x84b,0x832,0x819,
  0x800,0x7e6,0x7cd,0x7b4,0x79b,0x782,0x769,0x750,
  0x737,0x71e,0x705,0x6ec,0x6d3,0x6ba,0x6a1,0x689,
  0x670,0x657,0x63f,0x626,0x60e,0x5f6,0x5dd,0x5c5,
  0x5ad,0x595,0x57d,0x565,0x54e,0x536,0x51f,0x507,
  0x4f0,0x4d9,0x4c2,0x4ab,0x494,0x47d,0x467,0x451,
  0x43a,0x424,0x40e,0x3f9,0x3e3,0x3cd,0x3b8,0x3a3,
  0x38e,0x379,0x365,0x350,0x33c,0x328,0x314,0x300,
  0x2ed,0x2d9,0x2c6,0x2b3,0x2a0,0x28e,0x27c,0x26a,
  0x258,0x246,0x235,0x223,0x212,0x202,0x1f1,0x1e1,
  0x1d1,0x1c1,0x1b1,0x1a2,0x193,0x184,0x175,0x167,
  0x159,0x14b,0x13e,0x130,0x123,0x117,0x10a,0xfe,
  0xf2,0xe6,0xdb,0xcf,0xc5,0xba,0xb0,0xa6,
  0x9c,0x92,0x89,0x80,0x78,0x6f,0x67,0x60,
  0x58,0x51,0x4a,0x44,0x3d,0x37,0x32,0x2c,
  0x27,0x23,0x1e,0x1a,0x16,0x13,0xf,0xc,
  0xa,0x8,0x6,0x4,0x2,0x1,0x1,0x0,
  0x0,0x0,0x1,0x1,0x2,0x4,0x6,0x8,
  0xa,0xc,0xf,0x13,0x16,0x1a,0x1e,0x23,
  0x27,0x2c,0x32,0x37,0x3d,0x44,0x4a,0x51,
  0x58,0x60,0x67,0x6f,0x78,0x80,0x89,0x92,
  0x9c,0xa6,0xb0,0xba,0xc5,0xcf,0xdb,0xe6,
  0xf2,0xfe,0x10a,0x117,0x123,0x130,0x13e,0x14b,
  0x159,0x167,0x175,0x184,0x193,0x1a2,0x1b1,0x1c1,
  0x1d1,0x1e1,0x1f1,0x202,0x212,0x223,0x235,0x246,
  0x258,0x26a,0x27c,0x28e,0x2a0,0x2b3,0x2c6,0x2d9,
  0x2ed,0x300,0x314,0x328,0x33c,0x350,0x365,0x379,
  0x38e,0x3a3,0x3b8,0x3cd,0x3e3,0x3f9,0x40e,0x424,
  0x43a,0x451,0x467,0x47d,0x494,0x4ab,0x4c2,0x4d9,
  0x4f0,0x507,0x51f,0x536,0x54e,0x565,0x57d,0x595,
  0x5ad,0x5c5,0x5dd,0x5f6,0x60e,0x626,0x63f,0x657,
  0x670,0x689,0x6a1,0x6ba,0x6d3,0x6ec,0x705,0x71e,
  0x737,0x750,0x769,0x782,0x79b,0x7b4,0x7cd,0x7e6,
};

uint8_t sineTable2[256] = {
  0x80,0x83,0x86,0x89,0x8c,0x8f,0x92,0x95,
  0x98,0x9b,0x9e,0xa2,0xa5,0xa7,0xaa,0xad,
  0xb0,0xb3,0xb6,0xb9,0xbc,0xbe,0xc1,0xc4,
  0xc6,0xc9,0xcb,0xce,0xd0,0xd3,0xd5,0xd7,
  0xda,0xdc,0xde,0xe0,0xe2,0xe4,0xe6,0xe8,
  0xea,0xeb,0xed,0xee,0xf0,0xf1,0xf3,0xf4,
  0xf5,0xf6,0xf8,0xf9,0xfa,0xfa,0xfb,0xfc,
  0xfd,0xfd,0xfe,0xfe,0xfe,0xff,0xff,0xff,
  0xff,0xff,0xff,0xff,0xfe,0xfe,0xfe,0xfd,
  0xfd,0xfc,0xfb,0xfa,0xfa,0xf9,0xf8,0xf6,
  0xf5,0xf4,0xf3,0xf1,0xf0,0xee,0xed,0xeb,
  0xea,0xe8,0xe6,0xe4,0xe2,0xe0,0xde,0xdc,
  0xda,0xd7,0xd5,0xd3,0xd0,0xce,0xcb,0xc9,
  0xc6,0xc4,0xc1,0xbe,0xbc,0xb9,0xb6,0xb3,
  0xb0,0xad,0xaa,0xa7,0xa5,0xa2,0x9e,0x9b,
  0x98,0x95,0x92,0x8f,0x8c,0x89,0x86,0x83,
  0x80,0x7c,0x79,0x76,0x73,0x70,0x6d,0x6a,
  0x67,0x64,0x61,0x5d,0x5a,0x58,0x55,0x52,
  0x4f,0x4c,0x49,0x46,0x43,0x41,0x3e,0x3b,
  0x39,0x36,0x34,0x31,0x2f,0x2c,0x2a,0x28,
  0x25,0x23,0x21,0x1f,0x1d,0x1b,0x19,0x17,
  0x15,0x14,0x12,0x11,0xf,0xe,0xc,0xb,
  0xa,0x9,0x7,0x6,0x5,0x5,0x4,0x3,
  0x2,0x2,0x1,0x1,0x1,0x0,0x0,0x0,
  0x0,0x0,0x0,0x0,0x1,0x1,0x1,0x2,
  0x2,0x3,0x4,0x5,0x5,0x6,0x7,0x9,
  0xa,0xb,0xc,0xe,0xf,0x11,0x12,0x14,
  0x15,0x17,0x19,0x1b,0x1d,0x1f,0x21,0x23,
  0x25,0x28,0x2a,0x2c,0x2f,0x31,0x34,0x36,
  0x39,0x3b,0x3e,0x41,0x43,0x46,0x49,0x4c,
  0x4f,0x52,0x55,0x58,0x5a,0x5d,0x61,0x64,
  0x67,0x6a,0x6d,0x70,0x73,0x76,0x79,0x7c
};

volatile uint32_t acc1=0, m1=0;
volatile uint32_t acc2[16]={0}, m2[16]={0};

enum Mode {single, multiple};
volatile Mode mode=single;

enum Function {single_frequency, sweep, sweep_n_sinusoids, multiple_frequencies_demo};


// ### Configuration ###
Function current_function = sweep;
float n_sinusoids = 10;
float f1 = 0.5;
float f2 = 121;
// ### End of configuration ###

IntervalTimer timer0;

float cor=1; // cor = measured frequency (with frequency counter) divided by desired frequency

const int pausePin = 0;
const int ledPin = 13;
const int resetPin = 1;

uint32_t freq(float f)
{
  return f * pow(2, 32) / (50000 * cor);
}

void stop()
{
  acc1=0;
  m1=0;
}

void setup() {
  Serial.begin(9600);
  SIM_SCGC6 |= SIM_SCGC6_DAC0;
  DAC0_C0 = DAC_C0_DACEN | DAC_C0_DACRFS;

  timer0.begin(clk, 20); // 20 usec -> f = 50 kHz
  pinMode(pausePin, INPUT_PULLUP);
  pinMode(ledPin, OUTPUT);
  pinMode(resetPin, INPUT_PULLUP);

  if(digitalRead(resetPin)==LOW) {
    Serial.print("Resetting initial frequency to ");
    Serial.println(f1);
    saveFrequency(f1);
    ledOn();
    delay(1000);
    ledOff();
    delay(1000);
    ledOn();
    delay(1000);
    ledOff();
    while(1);
  }

  /*
  m2[0]=freq(121);
  m2[1]=freq(45.53);
  m2[2]=freq(67.89);
  m2[3]=freq(70.8);
  m2[4]=freq(100);
  mode=2;
  */
}

void clk()
{
  uint16_t v=0;
  switch(mode) {
    case single:
      *(int16_t *)&(DAC0_DAT0L) = sineTable1[acc1>>23];
      acc1+=m1;
      break;
    case multiple:
      for(uint8_t i=0;i<16;i++) {
        v+=sineTable2[acc2[i]>>24];
        acc2[i]+=m2[i];
      }
      *(int16_t *)&(DAC0_DAT0L) = v;  
      break;
    default:
      break;
  }
}

void checkPauseButton(float currentFrenquency)
{
  if(digitalRead(pausePin) == HIGH) // HIGH means that the jumper is removed so we want to pause
    saveFrequency(currentFrenquency);
  while(digitalRead(pausePin) == HIGH)
    delay(100);
}

void ledOn()
{
  digitalWrite(ledPin, HIGH);
}

void ledOff()
{
  digitalWrite(ledPin, LOW);
}

void saveFrequency(float freq)
{
  uint8_t *ptr;
  ptr = (uint8_t *)&freq;
  for(unsigned int i=0;i<sizeof(float);i++)
    EEPROM.write(i, ptr[i]);
}

float loadFrequency()
{
  float ret=0;
  uint8_t *ptr = (uint8_t *)&ret;
  for(unsigned int i=0;i<sizeof(float);i++)
    ptr[i] = EEPROM.read(i);
  return ret;
}

void loop() {
  
  switch(current_function) {
    
    case single_frequency:
      m1 = freq(121);
      ledOn();
      while(1);
      break;
      
    case sweep:
      for(float f=loadFrequency();f<=f2;f+=0.01) {
        Serial.print("f=");
        Serial.println(f);
        checkPauseButton(f);
        for(int i=0;i<5;i++) {
          m1=freq(f);
          ledOn();
          delay(400);
          stop();
          ledOff();
          delay(600); 
        }
      }
      ledOn();
      while(1);
      break;
      
    case sweep_n_sinusoids:
      for(float f=loadFrequency();f<=f2;f+=0.01) {
        Serial.print("f=");
        Serial.println(f);
        checkPauseButton(f);
        for(int i=0;i<5;i++) {
          m1=freq(f);
          ledOn();
          delay(n_sinusoids*1000/f);
          stop();
          ledOff();
          delay(n_sinusoids*1000/f); 
        }
      }
      ledOn();
      while(1);
      break;

    case multiple_frequencies_demo:
      m2[0]=freq(121);
      m2[1]=freq(45.53);
      m2[2]=freq(67.89);
      m2[3]=freq(70.8);
      m2[4]=freq(100);
      mode=multiple;
      ledOn();
      break;
  }
    
}



